{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","randomizeStartNode","randomizeFinishNode","state","mouseIsPressed","getInitialGrid","setState","Math","round","random","newGrid","getNewGridWithWalls","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ed542c47.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n        } = this.props;\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n                ? 'node-start'\r\n                : isWall\r\n                    ? 'node-wall'\r\n                    : '';\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}></div>\r\n        );\r\n    }\r\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from './algorithms/dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nlet START_NODE_ROW = 1;\r\nlet START_NODE_COL = 1;\r\nlet FINISH_NODE_ROW = 2;\r\nlet FINISH_NODE_COL = 2;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.randomizeStartNode()\r\n        this.randomizeFinishNode()\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }\r\n    randomizeStartNode(){\r\n        START_NODE_ROW = Math.round(Math.random()*20);\r\n        START_NODE_COL = Math.round(Math.random()*20);\r\n        const grid = getInitialGrid();\r\n        this.setState({grid})\r\n    }\r\n    randomizeFinishNode(){\r\n        FINISH_NODE_ROW = Math.round(Math.random()*20);\r\n        FINISH_NODE_COL = (Math.round(Math.random()*20-8))+8;\r\n        const grid = getInitialGrid();\r\n        this.setState({grid})\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-visited';\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Find The Path using Dijkstra\r\n                </button>\r\n                <button onClick={() => this.randomizeStartNode()}>\r\n                    Change the Start Node's Location\r\n                </button>\r\n                <button onClick={() => this.randomizeFinishNode()}>\r\n                    Change the Finish Node's Location\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col, isFinish, isStart, isWall} = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                            row={row}></Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}